package telegram

import (
	"context"
	"errors"
	"fmt"
	"html"
	"math/rand"
	"regexp"
	"strconv"
	"strings"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

var (
	errNothingPlayed = errors.New("nothing played")
)

type currentPlayer interface {
	name() string
	handle(context.Context) error
}

func getChatIDByUpdate(update *models.Update) *int64 {
	if update == nil || update.Message == nil {
		return nil
	}
	return &update.Message.Chat.ID
}

func getUserIDByUpdate(update *models.Update) *int64 {
	if update == nil || update.Message == nil || update.Message.From == nil {
		return nil
	}
	return &update.Message.From.ID
}

func tp[T any](what T) *T {
	return &what
}

var _emoticonsUTF = []string{
	"Õ°¬∞ Õú ñ Õ°¬∞",
	"‡∞†‡µ†‡∞† )Ôæâ",
	"‚ï¨ ‡≤†Áõä‡≤†",
	"„ÉΩ‡ºº ‡≤†Áõä‡≤† ‡ºΩÔæâ",
	"·Éö(‡≤†Áõä‡≤†·Éö)",
	"·Éö(‚Ä¢ÃÅ‚Ä¢ÃÅ·Éö)",
	"‡≤•Ôπè‡≤•",
	"‚óî_‚óî",
	" ö(‚Ä¢ÔΩÄ",
	"‚äô.‚òâ)7",
	"¬ø‚ìß_‚ìßÔÆå",
	"„Éü‚óèÔπè‚òâ„Éü",
	"ÔΩ°Ôæü( Ôæü‡Æá‚Ä∏‡ÆáÔæü)ÔæüÔΩ°",
	"‡≤•_‡≤•",
	"‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ",
	" ï‚Ä¢·¥•‚Ä¢ î",
	"ÔΩ°‚óï‚Äø‚óïÔΩ°",
	"„ÉΩ( ‚Ä¢_)·ïó",
	"‚ô™‚ô™ „ÉΩ(Àá‚àÄÀá )„Çû",
	"‚îå(„ÜÜ„â®„ÜÜ) É",
	"—âÔºàÔæü–îÔæü—âÔºâ",
	"‡≤†‚Äø‡≤†",
	"Ÿ©‚óîÃØ‚óî€∂",
	"‚äôÔπè‚äô",
	"( ‡≤†  ñÃØ ‡≤†)",
	"·ï¶(√≤_√≥Àá)·ï§",
	"„Éæ(-_- )„Çû",
	"‚òú(‚åí‚ñΩ‚åí)‚òû",
	"ÿ≠(‚Ä¢ÃÄ–∂‚Ä¢ÃÅ)‡∏á ‚Ä†",
	"‚•Ä.‚•Ä",
	"`ÔΩ•œâÔΩ•¬¥",
	"V‚Ä¢·¥•‚Ä¢V",
	"(‡∏áÃÄ-ÃÅ)‡∏á",
	"·Éö(ÔΩÄ„Éº¬¥·Éö)",
	"·ïô(‚áÄ‚Ä∏‚Üº‚Ä∂)·ïó",
	"‚ÅΩ‚ÅΩ‡¨ò( Àä·µïÀã )‡¨ì‚Åæ‚Åæ",
	"ÿ≠Àö‡Ø∞Àö„Å•",
	"t(-_-t)",
	"(¬∞ Õú ñÕ°¬∞)‚ï≠‚à©‚ïÆ",
	" ï ‚Ä¢`·¥•‚Ä¢¬¥ î",
	"„ÉΩ(¬¥‚ñΩ`)/",
	"\\(·µî·µï·µî)/",
	"(‡∏á„ÉÑ)‡∏ß",
	"(„Å•Ôø£ ¬≥Ôø£)„Å•",
	"(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ",
	"(“Ç‚ó°_‚ó°)",
	" ò‚Äø ò",
	"¬∞‚Äø‚Äø¬∞",
	"{‡≤† ñ‡≤†}",
	"( ‡∞† Õü ñ ‡∞†)",
	"‚äÇ(‚óâ‚Äø‚óâ)„Å§",
	"( Àò ¬≥Àò)‚ô•",
	"·µí·¥•·µí#",
	"‚óñ·µî·¥•·µî‚óó ‚ô™ ‚ô´",
	"(._.)",
	"‚ô•‚Äø‚ô•",
	"-`·É¶¬¥-",
	"¬Ø\\(¬∞_o)/¬Ø",
	"‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
	"„Éæ(¬¥„Äá`)Ôæâ‚ô™‚ô™‚ô™",
	"‡≤†‡≤†",
	"(‚òûÔæü„ÉÆÔæü)‚òû",
	"‡∞†_‡∞†",
	"(‘æ‚Ä∏ ‘æ)",
	"‡≤†_‡≤†",
	"·¥ñÃÆ ÃÆ·¥ñ",
	"{‚Ä¢ÃÉ_‚Ä¢ÃÉ}",
	"Œµ=Œµ=Œµ=‚îå(;*¬¥–î`)Ôæâ",
	"(·µü‡∫∂Ô∏µ ·µü‡∫∂)",
	"(‡≤•‚å£‡≤•)",
	"(‚ó†Ôπè‚ó†)",
	"·µî·¥•·µî",
	"( Àá‡∑¥Àá )",
	"(‡πë‚Ä¢ÃÅ ‚ÇÉ ‚Ä¢ÃÄ‡πë)",
	"Îàà_Îàà",
	" ï òÃÖÕú òÃÖ î",
	" ï·µî·¥•·µî î",
	"Ÿ©(‡πè_‡πè)€∂",
	"(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•",
	"·ïï( ·êõ )·ïó",
	"(„Å£‚ñÄ¬Ø‚ñÄ)„Å§",
	"(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª",
	"(‚©æÔπè‚©Ω)",
	"‚Äú„ÉΩ(¬¥‚ñΩÔΩÄ)„Éé‚Äù",
	"( Õ°‡≤†  ñÃØ Õ°‡≤†)",
	"‘Ö(‚âñ‚Äø‚âñ‘Ö)",
	"q(‚ùÇ‚Äø‚ùÇ)p",
	"~(^-^)~",
	"(„Å£‚Ä¢ÃÅÔΩ°‚Ä¢ÃÅ)‚ô™‚ô¨",
	" ï ‚Ä¢ÃÅÿà‚Ä¢ÃÄ)",
	"(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà ÃëÃë",
	"(‚à©ÔΩÄ-¬¥)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ°Ôæü",
	"¬¥ÔΩ•_ÔΩ•`",
	"„Å£Àò⁄°ÀòœÇ",
	"[¬¨¬∫-¬∞]¬¨",
	"(‚äô_‚óé)",
	":)", ":(", ":D", ";)", ":P", ":-|", ":O", ":'(", ":3", ":*",
	">:(", ">.<", ">_<", "^_^", "-_-", "o.O", "O.o", "(¬¨_¬¨)", "(‡≤†_‡≤†)",
	"(‡≤•Ôπè‡≤•)", "(¬¨‚Äø¬¨)", "(¬∞ Õú ñ ¬∞)", "(‚úßœâ‚úß)", "(‡≤†‚Äø‡≤†)", "(Õ°¬∞ Õú ñ Õ°¬∞)", "(¬¨‚Äø¬¨)",
	"(„Éé‡≤†Áõä‡≤†)„ÉéÂΩ°‚îª‚îÅ‚îª", " ï‚Ä¢·¥•‚Ä¢ î", "(‡∏á ‚Ä¢ÃÄ_‚Ä¢ÃÅ)‡∏á",
	"(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•", "(„Å•Ôø£ ¬≥Ôø£)„Å•", "¬Ø\\_(„ÉÑ)_/¬Ø", "(‚òûÔæü„ÉÆÔæü)‚òû", "(‚ï•Ôπè‚ï•)", "(¬¨‚Äø¬¨)",
	"·ïï( ·êõ )·ïó", "(‚ïØÔ∏µ‚ï∞,)", "(‚úø‚óï‚Äø‚óï)", "·Éö(‡≤†Áõä‡≤†·Éö)", "(>^.^<)", "(‚ô•_‚ô•)", "(‡≤†‚å£‡≤†)",
	"( ò‚Äø ò)", "( ò‚Äø ò)„Éé‚úø", "(‚ï¨‡≤†Áõä‡≤†)", "(‡∏á'ÃÄ-'ÃÅ)‡∏á", "(‚úñ‚ï≠‚ïÆ‚úñ)", "(‡≤•‚Äø‡≤•)", "(‚äô_‚òâ)",
	"(‚òâ_‚òâ)", "(‚ïØ_‚ï∞)", "( Õ°·µî Õú ñ Õ°·µî )", "(·µî·¥•·µî)", "(‚âß‚ó°‚â¶)", "(Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:„ÉªÔæü‚úß", "(‡≤†‚Äø‚Üº)",
	"(‚ú™œâ‚ú™)", "(‚à©ÔΩÄ-¬¥)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ°Ôæü", "(„Å•Ôø£ ¬≥Ôø£)„Å•üíñ", "‚îå( ‡≤†_‡≤†)‚îò", "(‚ï≠‡≤∞·¥•‚Ä¢ÃÅ)",
	"(‚ùõ‚Äø‚ùõ)", "(‚äô_‚óé)", "Ôºà„Äú^‚àá^)„Äú", "·ï¶(√≤_√≥Àá)·ï§", "‚äÇ(‚óâ‚Äø‚óâ)„Å§", "(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ( .o.)",
	"(¬¨‚Äø¬¨)", "‡≤†‚ï≠‚ïÆ‡≤†", "‡ºº „Å§ ‚óï_‚óï ‡ºΩ„Å§", "(‚ïØ‚äô ‚ä± ‚äô‚ï∞ )", "( ‡≤†Áõä‡≤† )", "‡≤•_‡≤•",
	"( Õ°¬∞ Õú ñ Õ°¬∞)", "(‚òûÔæü„ÉÆÔæü)‚òû  ï‚Ä¢·¥•‚Ä¢ î", "(„Éé‡≤•,_ÔΩ£‡≤•)„Éé", "(·óí·ó£·óï)’û", "‡≠ß‡ºº‡≤†Áõä‡≤†‡ºΩ‡≠®",
	"(‚òØ‚Äø‚òØ‚úø)", "(‚úß–î‚úß)", "( ò·¥ó ò‚úø)", "(„Å§‚ñÄ¬Ø‚ñÄ)„Å§", "(‡∏á'ÃÄ-'ÃÅ)‡∏á", "(‚öÜ_‚öÜ)",
	"‡≤•Áõä‡≤•", "(¬∞„Éò¬∞)", "(‚äôÔπè‚äô)", "(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ",
}

func totalRandomEmoji() string {
	if rand.Intn(2) == 1 {
		return randomEmoticonUTF()
	}
	return fmt.Sprintf("%s %s %s", randomEmoji(), randomEmoji(), randomEmoji())
}

func randomEmoticonUTF() string {
	return _emoticonsUTF[rand.Intn(len(_emoticonsUTF))]
}

func randomEmoji() string {
	// http://apps.timwhitlock.info/emoji/tables/unicode
	emoji := [][]int{
		// Emoticons icons
		{128513, 128591},
		// Transport and map symbols
		{128640, 128704},
	}
	r := emoji[rand.Int()%len(emoji)]
	min := r[0]
	max := r[1]
	n := rand.Intn(max-min+1) + min
	return html.UnescapeString("&#" + strconv.Itoa(n) + ";")
}

func tgText(text string) string {
	return bot.EscapeMarkdownUnescaped(text)
}

func tgLink(description, link string) string {
	return fmt.Sprintf("[%s](%s)", bot.EscapeMarkdownUnescaped(description), bot.EscapeMarkdownUnescaped(link))
}

func timeToRu(t time.Time) string {
	return t.Format("15:04 02.01.2006") + fmt.Sprintf(" (%s)", getTimeZone())
}

func timeToRuWithSeconds(t time.Time) string {
	return t.Format("15:04:05 02.01.2006") + fmt.Sprintf(" (%s)", getTimeZone())
}

func getTimeZone() string {
	zone, _ := time.Now().Zone()
	return zone
}

func escapeMarkdownV2(input string) string {
	// –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
	re := regexp.MustCompile(`([_*\[\]()~>#+\-=\|{}.!\\])`) // –î–æ–±–∞–≤–ª–µ–Ω —Å–∏–º–≤–æ–ª `\` –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	return re.ReplaceAllString(input, `\$1`)                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
}

func sliceByRunes(s string, start, end int) string {
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å—Ä–µ–∑ —Ä—É–Ω
	runes := []rune(s)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ start –∏ end –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–ª–∏–Ω—ã —Å—Ä–µ–∑–∞ —Ä—É–Ω
	if start < 0 || start > len(runes) || end > len(runes) || start > end {
		// –ï—Å–ª–∏ end –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
		return s
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–∑ —Å—Ç—Ä–æ–∫, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
	return string(runes[start:end])
}

func sliceToLastDot(s string) string {
	// –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
	index := strings.LastIndex(s, ".")

	// –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –æ–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ —ç—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (–≤–∫–ª—é—á–∞—è —Ç–æ—á–∫—É)
	if index != -1 {
		return s[:index+1]
	}

	// –ï—Å–ª–∏ —Ç–æ—á–∫–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏–∫–æ–º
	return s
}

func trimToFirstNewline(s string) string {
	// –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
	index := strings.Index(s, "\n")

	// –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–∞–π–¥–µ–Ω, –æ–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–æ —ç—Ç–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
	if index != -1 {
		return s[:index]
	}
	// –ï—Å–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Ü–µ–ª–∏–∫–æ–º
	return s
}

func removeExtraNewlines(input string) string {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ \n –Ω–∞ –æ–¥–∏–Ω \n
	re := regexp.MustCompile(`\n+`)
	return re.ReplaceAllString(input, "\n")
}

type footerMessage struct {
	honestReaction string
	message        string
}

func (f footerMessage) get() string {
	return f.message
}

func (f *footerMessage) update(withHonest bool) string {
	if withHonest || len(f.honestReaction) == 0 {
		f.honestReaction = tgText(totalRandomEmoji())
	}
	updatedAt := tgText(timeToRuWithSeconds(time.Now()))
	managedBy := tgText("powered by oklookat/teletrack")
	f.message = "\n\n" + fmt.Sprintf("%s\n%s\n%s", f.honestReaction, updatedAt, managedBy)
	return f.message
}
